

#include "ConexionWifi.h"
#include "DNSServicio.h"
#include "Servidor.h"
#include "RTC.h"
#include "ModoAp.h"


/**
 * @brief Establece conexi√≥n Wi-Fi con configuraci√≥n IP est√°tica/DHCP y timeout
 * 
 * @details Funci√≥n principal para conectar el dispositivo a una red Wi-Fi espec√≠fica.
 *          Implementa un sistema robusto con las siguientes caracter√≠sticas:
 *          
 *          **PROCESO DE CONEXI√ìN:**
 *          1. **Parsing de IP:** Analiza y valida la IP est√°tica en formato "a.b.c.d"
 *          2. **Configuraci√≥n de Red:** Establece IP est√°tica o fallback a DHCP
 *          3. **Conexi√≥n Wi-Fi:** Inicia conexi√≥n con credenciales proporcionadas
 *          4. **Timeout Control:** Espera conexi√≥n hasta timeout_ms milisegundos
 *          5. **Servicios Post-Conexi√≥n:** Activa DNS personalizado y sincroniza RTC
 *          
 *          **CONFIGURACI√ìN IP EST√ÅTICA:**
 *          - Validaci√≥n autom√°tica de formato y rangos (0-255 por octeto)
 *          - Gateway inferido como "a.b.c.1" (convenci√≥n de redes dom√©sticas)
 *          - Subnet mask /24 (255.255.255.0) est√°ndar
 *          - DNS Google (8.8.8.8 primario, 8.8.4.4 secundario)
 *          - Fallback autom√°tico a DHCP si IP inv√°lida
 *          
 *          **GESTI√ìN DE ERRORES:**
 *          - Timeout configurable evita bloqueos indefinidos
 *          - Validaci√≥n de IP antes de aplicar configuraci√≥n
 *          - Logging detallado del proceso (condicional con DEBUGWIFI)
 *          - Retorno seguro sin crash ante fallos
 * 
 * @param ConfiguracionWiFi Estructura de configuraci√≥n Wi-Fi que debe contener:
 *                          - ssid: Nombre de la red Wi-Fi (string)
 *                          - password: Contrase√±a de la red (string)
 *                          - ip: Direcci√≥n IP est√°tica en formato "a.b.c.d" (string)
 *                          - dominio: Dominio personalizado para DNS (string)
 * @param timeout_ms Tiempo m√°ximo de espera para establecer conexi√≥n en milisegundos
 *                   - Valor por defecto: 10,000ms (10 segundos)
 *                   - Rango recomendado: 5,000-30,000ms
 *                   - 0 = espera indefinida (NO recomendado)
 * 
 * @retval true Conexi√≥n Wi-Fi establecida exitosamente y servicios activados
 * @retval false Error en conexi√≥n, timeout superado o configuraci√≥n inv√°lida
 * 
 * @note **SERVICIOS ACTIVADOS TRAS CONEXI√ìN:**
 *       - ActualizaDNS(dominio): Configura DNS personalizado del proyecto
 *       - RTC::beginConMultiplesServidores(): Sincroniza reloj con servidores NTP
 * 
 * 
 * @warning **IP EST√ÅTICA:**
 *          - Formato obligatorio: "a.b.c.d" (ej: "192.168.1.100")
 *          - Rangos v√°lidos: cada octeto 0-255
 *          - Gateway se infiere como "a.b.c.1" autom√°ticamente
 * 
 * @warning **CONFIGURACI√ìN:**
 *          - ConfiguracionWiFi.ssid no debe estar vac√≠o
 *          - ConfiguracionWiFi.password puede estar vac√≠o (redes abiertas)
 *          - timeout_ms > 0 para evitar esperas indefinidas
 * 
 * @see ConfigWiFi - Estructura de configuraci√≥n utilizada
 * @see ActualizaDNS() - Funci√≥n de DNS llamada tras conexi√≥n
 * @see RTC::beginConMultiplesServidores() - Sincronizaci√≥n temporal
 * @see WiFi.config() - Configuraci√≥n IP est√°tica de ESP32
 * @see WiFi.begin() - Inicio de conexi√≥n Wi-Fi
 * 
 * @example
 * @code
 * ConfigWiFi config = {"MiRed", "MiPassword", "192.168.1.100", "midominio.local"};
 * if (ConectarWifi(config, 15000)) {
 *     Serial.println("Wi-Fi conectado exitosamente");
 *     // Sistema listo para usar servicios de red
 * } else {
 *     Serial.println("Error de conexi√≥n Wi-Fi");
 *     // Activar modo AP o reintentar
 * }
 * @endcode
 * 
 * @since v1.0 - Implementaci√≥n b√°sica con IP est√°tica
 * @since v2.0 - A√±adido parsing autom√°tico y validaci√≥n
 * @since v2.1 - Timeout configurable y mejor manejo de errores
 * 
 * @author Julian Salas Bartolom√©
 * @date 2025-09-14
 */
bool ConectarWifi(const ConfigWiFi& ConfiguracionWiFi, unsigned long timeout_ms ) 
{
    DBG_WIFI("=== INICIANDO CONEXI√ìN WI-FI ===");
    DBG_WIFI_PRINTF("SSID: %s", ConfiguracionWiFi.ssid);
    DBG_WIFI_PRINTF("IP configurada: %s", ConfiguracionWiFi.ip);
    DBG_WIFI_PRINTF("Dominio: %s", ConfiguracionWiFi.dominio);
    DBG_WIFI_PRINTF("Timeout: %lu ms", timeout_ms);
 
    int a=-1,b=-1,c=-1,d=-1;                                                                            // Variables para parsing de IP                   
    bool ipValida = (sscanf(ConfiguracionWiFi.ip, "%d.%d.%d.%d", &a,&b,&c,&d) == 4) &&
                    (a>=0 && a<=255 && b>=0 && b<=255 && c>=0 && c<=255 && d>=0 && d<=255);

    IPAddress local_IP;                                                                                 // Se rellenar√° si ipValida
    IPAddress gateway;                                                                                  // Derivamos gateway como a.b.c.1 (heur√≠stica) si no se dispone de otro dato
    IPAddress subnet(255, 255, 255, 0);                                                                 // Mantener /24 por defecto
    IPAddress primaryDNS(8, 8, 8, 8);                                                                   // DNS Google primario                     
    IPAddress secondaryDNS(8, 8, 4, 4);                                                                 // DNS Google secundario 

    if(ipValida) {                                                                                      //  Si la IP es v√°lida, configuramos IP est√°tica
        local_IP = IPAddress((uint8_t)a,(uint8_t)b,(uint8_t)c,(uint8_t)d);                              // Convertir a IPAddress   
        gateway  = IPAddress((uint8_t)a,(uint8_t)b,(uint8_t)c,1); // suposici√≥n habitual
        if (!WiFi.config(local_IP, gateway, subnet, primaryDNS, secondaryDNS)) {                        // Configurar IP est√°tica , si no se puede configurar
            DBG_WIFI("ERROR: Configuraci√≥n de IP est√°tica fallida");
            return false;                                                                               // Retornar error                  
        } else {
            DBG_WIFI("‚úÖ IP est√°tica configurada: " + local_IP.toString());
            DBG_WIFI("‚úÖ Gateway inferido: " + gateway.toString());
            DBG_WIFI("‚úÖ Subnet: " + subnet.toString());
        }
    } else {                                                                                            // Si la IP no es v√°lida
           DBG_WIFI("‚ö†Ô∏è  IP inv√°lida en configuraci√≥n ('" + String(ConfiguracionWiFi.ip) + "'). Usando DHCP.");
    }

    DBG_WIFI("üîÑ Iniciando conexi√≥n Wi-Fi...");
    DBG_WIFI("üîó Conectando a: " + String(ConfiguracionWiFi.ssid));

    WiFi.begin(ConfiguracionWiFi.ssid, ConfiguracionWiFi.password);                                   // Iniciar conexi√≥n Wi-Fi

    unsigned long startAttemptTime = millis();                                                        // Tiempo de inicio para timeout          
    int dots = 0;                                                                                     // Contador de puntos para log          
    while (WiFi.status() != WL_CONNECTED && (millis() - startAttemptTime) < timeout_ms) {             // Esperar hasta conexi√≥n o timeout
      delay(500);
      DBG_WIFI_PRINT(".");
      dots++;
      if (dots >= 16) { // Evitar l√≠neas demasiado largas en el log
          DBG_WIFI_PRINT("\n");
          dots = 0;
      }
    }

  if (WiFi.status() == WL_CONNECTED) {                                                              // Si la conexi√≥n fue exitosa
      DBG_WIFI();
      DBG_WIFI("üéâ ¬°Conexi√≥n Wi-Fi establecida exitosamente!");
      DBG_WIFI_PRINT("üì° Direcci√≥n IP asignada: ");
      DBG_WIFI(WiFi.localIP());
      DBG_WIFI_PRINT("üåê Gateway: ");
      DBG_WIFI(WiFi.gatewayIP());
      DBG_WIFI_PRINT("üì∂ Intensidad se√±al (RSSI): ");
      DBG_WIFI(WiFi.RSSI());
      DBG_WIFI_PRINT(" dBm");

      DBG_WIFI("üîß Configurando servicios DNS...");
      ActualizaDNS(ConfiguracionWiFi.dominio);                                                      // Configurar DNS personalizado                
      //RTC::begin();
      RTC::beginConMultiplesServidores();                                                           // Sincronizar reloj con NTP
      return true;                                                                                  // Retornar √©xito     
    } else {                                                                                        // Si la conexi√≥n fall√≥ (timeout)      
      DBG_WIFI("Error al conectar a la red Wi-Fi (timeout).");
      return false;                                                                                 // Retornar error          
    }
}