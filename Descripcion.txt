---

## **Descripción General de la Aplicación Campanario**

La aplicación **Campanario** es un sistema embebido basado en ESP32 para la gestión y control de un campanario electrónico. 
Permite automatizar el toque de campanas, el control de la calefacción y la gestión remota a través de WiFi, WebSocket e I2C. 
El sistema puede funcionar tanto de forma autónoma (por horarios) como bajo órdenes recibidas desde una interfaz web o desde 
un dispositivo maestro por I2C.

---

## **Función de Cada Módulo**

### 1. **Campanarios.ino**
- **Función:**  
  Es el archivo principal (`main`) del proyecto. Gestiona la inicialización de hardware, la configuración WiFi, el arranque del servidor web, 
  la inicialización del bus I2C y el bucle principal de control.
- **Responsabilidades:**
  - Inicializa el sistema y los periféricos.
  - Gestiona el modo configuración (AP) si el pin de configuración está a LOW.
  - Conecta a la red WiFi y arranca el servidor web.
  - Inicializa el bus I2C como esclavo y asocia los manejadores de eventos.
  - Crea y añade las instancias de campanas y calefacción al objeto Campanario.
  - En el loop, atiende órdenes recibidas por I2C o WebSocket y ejecuta las secuencias correspondientes.
  - Llama periódicamente a funciones de chequeo de cuartos y test de campanadas.

---

### 2. **Campana.h / Campana.cpp**
- **Función:**  
  Define la clase `CAMPANA`, que representa una campana física controlada por el sistema.
- **Responsabilidades:**
  - Gestiona el encendido y apagado de la campana.
  - Permite definir diferentes patrones de toque.

---

### 3. **Calefaccion.h / Calefaccion.cpp**
- **Función:**  
  Define la clase `CALEFACCION`, que representa el sistema de calefacción del campanario.
- **Responsabilidades:**
  - Permite encender y apagar la calefacción.
  - Gestiona el estado actual de la calefacción.

---

### 4. **Campanario.h / Campanario.cpp**
- **Función:**  
  Define la clase `Campanario`, que es el núcleo lógico del sistema.
- **Responsabilidades:**
  - Gestiona el conjunto de campanas y la calefacción.
  - Ejecuta secuencias de toques (horas, cuartos, difuntos, misa, etc.).
  - Mantiene el estado global del campanario.

---

### 5. **RTC.h**
- **Función:**  
  Gestiona el reloj en tiempo real usando NTP.
- **Responsabilidades:**
  - Sincroniza la hora con servidores NTP.
  - Proporciona la hora local al sistema.
  - Indica si la hora está sincronizada.

---

### 6. **ConexionWifi.h**
- **Función:**  
  Gestiona la conexión WiFi del sistema.
- **Responsabilidades:**
  - Carga la configuración WiFi.
  - Conecta a la red y gestiona el estado de la conexión.
  - Permite el arranque en modo AP para configuración.

---

### 7. **ModoAP.h**
- **Función:**  
  Gestiona el modo Access Point (AP) y el portal cautivo para configuración inicial.
- **Responsabilidades:**
  - Arranca el ESP32 como punto de acceso.
  - Permite al usuario configurar la red WiFi desde un navegador.

---

### 8. **DNSServicio.h**
- **Función:**  
  Gestiona la actualización dinámica de DNS para acceso remoto.
- **Responsabilidades:**
  - Envía peticiones HTTP a servidores DNS para actualizar la IP pública asociada a un dominio.

---

### 9. **Servidor.h**
- **Función:**  
  Gestiona el servidor web asíncrono y los WebSockets.
- **Responsabilidades:**
  - Sirve la interfaz web al usuario.
  - Recibe y procesa comandos desde la web (por WebSocket).
  - Envía actualizaciones de estado a los clientes conectados.

---

### 10. **Auxiliar.h**
- **Función:**  
  Contiene funciones auxiliares y utilitarias.
- **Responsabilidades:**
  - Gestiona la comunicación I2C (recepción y envío de datos).
  - Procesa y ejecuta secuencias recibidas.
  - Funciones de chequeo de cuartos y horas.
  - Conversión y formateo de datos.

---

### 11. **Display.h** (en el DialCampanario)
- **Función:**  
  Gestiona la visualización en pantalla del dial.
- **Responsabilidades:**
  - Muestra menús, mensajes, iconos y la hora.
  - Gestiona el brillo y el modo sleep del display.

---

### 12. **DialCampanario.ino** (en el DialCampanario)
- **Función:**  
  Es el firmware del dispositivo dial (cliente I2C).
- **Responsabilidades:**
  - Permite al usuario seleccionar y enviar órdenes al campanario.
  - Muestra el estado y la hora en pantalla.
  - Gestiona la interacción con el usuario (botones, encoder).

---

## **Resumen del Flujo General**

1. **Arranque:**  
   El sistema arranca, inicializa hardware y periféricos, y conecta a WiFi o entra en modo AP para configuración.
2. **Sincronización:**  
   Sincroniza la hora con NTP y actualiza el DNS si es necesario.
3. **Ejecución:**  
   Atiende órdenes recibidas por WebSocket o I2C, ejecuta secuencias de campanas y controla la calefacción.
4. **Visualización:**  
   Muestra el estado y la hora en la pantalla del dial y en la interfaz web.
5. **Gestión remota:**  
   Permite el control y la consulta del estado desde cualquier dispositivo conectado a la red o por acceso remoto.

---

