#include "Auxiliar.h"



void setup() {
   delay (3000);
   
    Serial.begin(9600);
    Serial.println("Inicio");
    
    InicioDisplay();
    ClearPantalla();

    Wire.begin();
    Wire.setClock(100000);

    lCambioEstado = true;  // Indicar que se debe mostrar el mensaje de inicio
    
    MensajeInicio();  // Mostrar el mensaje de inicio
    delay(2000);  // Esperar 2 segundos para que el usuario vea el mensaje
}

void loop() {
 byte error, address;
  int nDevices = 0;
  for(address = 1; address < 127; address++ ) {
    Wire.beginTransmission(address);
    error = Wire.endTransmission();
    if (error == 0) {
      Serial.print("I2C device found at address 0x");
      Serial.println(address, HEX);
      nDevices++;
    }
  }
  if (nDevices == 0) Serial.println("No I2C devices found\n");
  delay(2000);
    Wire.beginTransmission(I2C_SLAVE_ADDR);
    Wire.write(3); // Enviar el estado de inicio al esclavo I2C
    Wire.endTransmission();
    Serial.println("Enviado estado de inicio al esclavo I2C");
    /*
    M5Dial.update();

  // Cambia el menú según el modo
    const int* menuActual = modoMenuReducido ? menuReducido : menuCompleto;
    nMenuItems = modoMenuReducido ? 3 : 5;


    if (lCambioEstado)
    {
      MostrarMenu(menuActual[nEstado]);
        lCambioEstado = false;
    }
    // Leer el encoder
    if (M5Dial.BtnA.wasPressed()) { 
        
           switch (menuActual[nEstado])
           {
                case EstadoInicio:
                    Serial.println("Estado Inicio");
                    break;    
                case EstadoDifuntos:
                    Serial.println("Estado Difuntos");
                    EnviarEstado(EstadoDifuntos);  // Enviar el estado de difuntos al esclavo I2C
                    modoMenuReducido = true;
                    nEstado = 0;  // Reiniciar el estado al primer elemento del menú reducido
                    lCambioEstado = true;  // Indicar que ha habido un cambio de estado
                    nEstadoAnterior = EstadoDifuntos;
                    break;
                case EstadoFiesta:
                    Serial.println("Estado Fiesta");
                    EnviarEstado(EstadoFiesta);  // Enviar el estado de fiesta al esclavo I2C
                    modoMenuReducido = true;  // Cambiar a modo menú reducido
                    nEstado = 0;  // Reiniciar el estado al primer elemento del menú reducido
                    lCambioEstado = true;  // Indicar que ha habido un cambio de estado
                    nEstadoAnterior = EstadoFiesta;
                    break;
                case EstadoMisa:
                    Serial.println("Estado Misa");
                    EnviarEstado(EstadoMisa);  // Enviar el estado de misa al esclavo I2C
                    modoMenuReducido = true;  // Cambiar a modo menú reducido
                    nEstado = 0;  // Reiniciar el estado al primer elemento del menú reducido
                    lCambioEstado = true;  // Indicar que ha habido un cambio de estado
                    nEstadoAnterior = EstadoMisa;
                    break;
                case EstadoStop:
                    Serial.println("Estado Stop");
                    EnviarEstado(EstadoStop);  // Enviar el estado de stop al esclavo I2C
                    modoMenuReducido = false;  // Cambiar a modo menú reducido
                    nEstado = nEstadoAnterior - 1;  // Volver al estado anterior
                    lCambioEstado = true;  // Indicar que ha habido un cambio de estado
                    break;
                case EstadoCalefaccionOn:
                    Serial.println("Estado Calefaccion On");
                    EnviarEstado(EstadoCalefaccionOn);  // Enviar el estado de calefacción encendida al esclavo I2C
                    break;
                case EstadoCalefaccionOff:
                    Serial.println("Estado Calefaccion Off");
                    EnviarEstado(EstadoCalefaccionOff);  // Enviar el estado de calefacción apagada al esclavo I2C
                    break;
                default:
                    break;
           }    
    }
    nPosicionActual = M5Dial.Encoder.read();
    if (nPosicionActual != nPosicionAneterior) {
        M5Dial.Speaker.tone(8000, 20);  // Emitir un pitido
        if (nPosicionActual > nPosicionAneterior) {
            if (nEstado < nMenuItems - 1) {
                nEstado++;
            } else {
                nEstado = nMenuItems - 1; // Limitar al último estado
            }
        } else {
            if (nEstado > 0) {
                nEstado--;
            } else {
                 nEstado = 0;
            }
         }
        lCambioEstado = true;  // Indicar que ha habido un cambio de estado
        nPosicionAneterior = nPosicionActual;        
    }
*/
}



