#include "Servidor.h"

    bool servidorIniciado = false;                               // Flag que indica si el servidor ha sido iniciado
    int  nToque = 0;                                             // Contador de toques del campanario
    AsyncWebSocket ws("/ws");                                    // WebSocket en la ruta /ws 
    AsyncWebServer server(80);                                   // Servidor HTTP en el puerto 80
    WiFiClient client;                                           // Cliente WiFi para manejar las conexiones



  /**
   * @brief Inicializa el servidor HTTP y WebSocket con autenticaci√≥n
   * 
   * @details Funci√≥n principal que configura e inicia el servidor web completo:
   *          
   *          **PROCESO DE INICIALIZACI√ìN:**
   *          1. Configuraci√≥n del servidor HTTP en puerto especificado
   *          2. Configuraci√≥n de rutas para archivos SPIFFS
   *          3. Inicializaci√≥n del WebSocket con callback onEvent()
   *          4. Configuraci√≥n de autenticaci√≥n HTTP Basic
   *          5. Inicio del servidor y establecimiento de servidorIniciado = true
   *          6. Logging de inicializaci√≥n exitosa
   * 
   * @param usuario Usuario para autenticaci√≥n HTTP Basic
   * @param clave Contrase√±a para autenticaci√≥n HTTP Basic
   * 
   * @note Debe llamarse DESPU√âS de WiFi.begin() exitoso
   * @note Debe llamarse DESPU√âS de SPIFFS.begin() exitoso
   * @note Establece autom√°ticamente servidorIniciado = true
   * @note Configura WebSocket en ruta "/ws"
   * 
   * @warning Requiere WiFi conectado antes de la llamada
   * @warning Requiere SPIFFS inicializado con archivos web
   * @warning Solo debe llamarse UNA vez durante inicializaci√≥n
   * 
   * @see onEvent() - Callback configurado para WebSocket
   * @see servidorIniciado - Variable establecida por esta funci√≥n
   * @see SPIFFS.begin() - Debe ejecutarse antes
   * 
   * @since v1.0 - Inicializaci√≥n b√°sica
   * @since v2.0 - A√±adido WebSocket
   * @since v3.0 - A√±adida autenticaci√≥n HTTP
   * 
   * @author Julian Salas Bartolom√©
   */
    void ServidorOn(const char* usuario, const char* clave)
    {
      
        if (!SPIFFS.begin(true)) {
            DBG_SRV("‚ùå Error al montar SPIFFS");
        } else {
            DBG_SRV("‚úÖ SPIFFS montado correctamente");
            String idiomaServidor = cargarIdiomaDesdeConfig();
            DBG_SRV_PRINTF("üåç Idioma del servidor: %s", idiomaServidor.c_str());
        }        
        if (!servidorIniciado) {                                                                  // Si el servidor no ha sido iniciado
            ws.onEvent(onEvent);                                                                    // Configura el manejador de eventos del WebSocket          
            server.addHandler(&ws);                                                                 // A√±ade el manejador de WebSocket al servidor HTTP

            server.on("/", HTTP_GET, [usuario, clave](AsyncWebServerRequest *request){
              if(!request->authenticate(usuario, clave)) {
                return request->requestAuthentication();
              }
              request->send(SPIFFS, "/index.html", "text/html");
              nToque = 0; // Resetea la secuencia a 0 al cargar la p√°gina principal
            });

            server.on("/Campanas.html", HTTP_GET, [usuario, clave](AsyncWebServerRequest *request){
              if(!request->authenticate(usuario, clave)) {
                return request->requestAuthentication();
              }
              request->send(SPIFFS, "/Campanas.html", "text/html");
            });

            server.on("/alarmas.html", HTTP_GET, [usuario, clave](AsyncWebServerRequest *request){
              if(!request->authenticate(usuario, clave)) {
                return request->requestAuthentication();
              }
              request->send(SPIFFS, "/alarmas.html", "text/html");
            });

            server.serveStatic("/", SPIFFS, "/");
            // Iniciar el servidor
            server.begin();
            DBG_SRV("Servidor HTTP iniciado en el puerto 80.");
            DBG_SRV("Servidor HTTP iniciado. Esperando conexiones...");
            servidorIniciado = true;                                       // Marca el servidor como iniciado
        }
    }


  /**
   * @brief Callback principal para eventos de WebSocket
   * 
   * @details Funci√≥n callback que maneja todos los eventos del WebSocket:
   *          conexiones, desconexiones, mensajes recibidos y errores.
   *
   *          **EVENTOS GESTIONADOS:**
   *          - WS_EVT_CONNECT: Nueva conexi√≥n de cliente
   *          - WS_EVT_DISCONNECT: Desconexi√≥n de cliente
   *          - WS_EVT_DATA: Mensaje recibido (delegado a procesaMensajeWebSocket)
   *          - WS_EVT_PONG: Respuesta pong recibida
   *          - WS_EVT_ERROR: Error en comunicaci√≥n WebSocket
   *
   * @param server Puntero al servidor WebSocket que gener√≥ el evento
   * @param client Puntero al cliente WebSocket involucrado
   * @param type Tipo de evento WebSocket ocurrido
   * @param arg Argumento adicional del evento
   * @param data Datos del mensaje (si type == WS_EVT_DATA)
   * @param len Longitud de los datos del mensaje
   *
   * @note Se ejecuta autom√°ticamente en cada evento WebSocket
   * @note Los mensajes de datos se delegan a procesaMensajeWebSocket()
   * @note Logging autom√°tico de eventos si DEBUGSERVIDOR est√° definido
   *
   * @warning No llamar directamente, es callback autom√°tico
   * @warning Los punteros pueden ser NULL seg√∫n el tipo de evento
   *
   * @see procesaMensajeWebSocket() - Procesa mensajes de datos
   * @see ws.onEvent() - Donde se registra este callback
   * @see AwsEventType - Tipos de eventos WebSocket
   *
   * @since v2.0
   * @author Julian Salas Bartolom√©
   *
   *          **EVENTOS GESTIONADOS:**
   *          - WS_EVT_CONNECT: Nueva conexi√≥n de cliente
   *          - WS_EVT_DISCONNECT: Desconexi√≥n de cliente
   *          - WS_EVT_DATA: Mensaje recibido (delegado a procesaMensajeWebSocket)
   *          - WS_EVT_PONG: Respuesta pong recibida
   *          - WS_EVT_ERROR: Error en comunicaci√≥n WebSocket
   * 
   * @param server Puntero al servidor WebSocket que gener√≥ el evento
   * @param client Puntero al cliente WebSocket involucrado
   * @param type Tipo de evento WebSocket ocurrido
   * @param arg Argumento adicional del evento
   * @param data Datos del mensaje (si type == WS_EVT_DATA)
   * @param len Longitud de los datos del mensaje
   * 
   * @note Se ejecuta autom√°ticamente en cada evento WebSocket
   * @note Los mensajes de datos se delegan a procesaMensajeWebSocket()
   * @note Logging autom√°tico de eventos si DEBUGSERVIDOR est√° definido
   * 
   * @warning No llamar directamente, es callback autom√°tico
   * @warning Los punteros pueden ser NULL seg√∫n el tipo de evento
   * 
   * @see procesaMensajeWebSocket() - Procesa mensajes de datos
   * @see ws.onEvent() - Donde se registra este callback
   * @see AwsEventType - Tipos de eventos WebSocket
   * 
   * @since v2.0
   * @author Julian Salas Bartolom√©
   */
    void onEvent(AsyncWebSocket *server, AsyncWebSocketClient *client, AwsEventType type, void *arg, uint8_t *data, size_t len) {
    
        switch (type) {
          case WS_EVT_CONNECT:
              DBG_SRV(" ");
              DBG_SRV("OnEvent->WS_EVT_CONNECT: ");
              DBG_SRV_PRINTF("WebSocket client #%u connected from %s\n", client->id(), client->remoteIP().toString().c_str());
              DBG_SRV(" ");
              break;
          case WS_EVT_DISCONNECT:
              DBG_SRV(" ");
              DBG_SRV("OnEvent->WS_EVT_DISCONNECT: ");
              DBG_SRV_PRINTF("WebSocket client #%u disconnected\n", client->id());
              DBG_SRV(" ");
              break;
          case WS_EVT_DATA:
              DBG_SRV(" ");
              DBG_SRV("OnEvent->WS_EVT_DATA: ");
              DBG_SRV_PRINTF("Message received: %s\n", (char*)data);
              DBG_SRV(" ");
              procesaMensajeWebSocket(arg, data, len);
              break;
          case WS_EVT_PONG:
          case WS_EVT_ERROR:
              break;
        }
      
    }
  /**
   * @brief Procesa mensajes recibidos por WebSocket
   * 
   * @details Funci√≥n especializada que analiza y ejecuta los comandos
   *          recibidos a trav√©s del WebSocket desde clientes web.
   *          
   *          **COMANDOS PROCESADOS:**
   *          - Comandos de control del campanario
   *                - "Difuntos": Inicia la secuencia de campanadas para difuntos y redirige a los clientes a la pantalla de campanas.
   *                - "Misa": Inicia la secuencia de campanadas para misa y redirige a los clientes a la pantalla de campanas.
   *                - "PARAR": Detiene cualquier secuencia de campanadas en curso y redirige a los clientes a la pantalla principal.
   *                - "CALEFACCION_ON": Enciende la calefacci√≥n y notifica a los clientes el nuevo estado.
   *                - "CALEFACCION_OFF": Apaga la calefacci√≥n y notifica a los clientes el nuevo estado.
   *          - Solicitudes de estado del sistema
   *                - "GET_CALEFACCION": Env√≠a a los clientes el estado actual de la calefacci√≥n.
   *                - "GET_CAMPANARIO": Env√≠a a los clientes el estado actual del campanario.
   *          - Configuraci√≥n de par√°metros
   *          - Ejecuci√≥n de secuencias de toques
   * 
   * @param arg Argumento adicional del mensaje WebSocket
   * @param data Puntero a los datos del mensaje recibido
   * @param len Longitud en bytes de los datos del mensaje
   * 
   * @note Llamada autom√°ticamente por onEvent() cuando type == WS_EVT_DATA
   * @note Interpreta datos como texto JSON o comandos de texto plano
   * @note Ejecuta acciones sobre el objeto Campanario seg√∫n el comando
   * @note Env√≠a respuestas de confirmaci√≥n a todos los clientes conectados
   * 
   * @warning Valida todas las entradas antes de ejecutar comandos
   * @warning Los datos recibidos pueden no estar null-terminated
   * 
   * @see onEvent() - Funci√≥n que llama a esta cuando hay datos
   * @see Campanario - Objeto utilizado para ejecutar comandos
   * @see ws.textAll() - Para enviar respuestas a todos los clientes
   * 
   * @since v2.0
   * @author Julian Salas Bartolom√©
   */
    void procesaMensajeWebSocket(void *arg, uint8_t *data, size_t len)
    {
        String mensaje = String((const char*)data).substring(0, len);       // Convierte los datos a String
        DBG_SRV(" ");
        DBG_SRV_PRINTF("procesaMensajeWebSocket -> Mensaje recibido: %s\n", mensaje);
        DBG_SRV(" ");
        //switch para procesar el mensaje recibido
        if (mensaje == "Difuntos") {                                        // Si el mensaje es "Difuntos"
            nToque = Config::States::DIFUNTOS;                              // Establece la secuencia a EstadoDifuntos para tocar difuntos
            ws.textAll("REDIRECT:/Campanas.html");                          // Indica a los clientes que deben redirigir a la pantalla de presentacion de las campanas
            DBG_SRV("Procesando mensaje: TocaDifuntos");
        } else if (mensaje == "Misa") {                                     // Si el mensaje es "Misa"
            nToque = Config::States::MISA;                                  // Establece la secuencia a Misa para tocar misa
            ws.textAll("REDIRECT:/Campanas.html");                          // Indica a los clientes que deben redirigir a la pantalla de presentacion de las campanas
            DBG_SRV("Procesando mensaje: TocaMisa");
        } else if (mensaje == "Fiesta") {                                   // Si el mensaje es "Fiesta"
            nToque = Config::States::FIESTA;                                // Establece la secuencia a Fiesta para tocar fiesta
            ws.textAll("REDIRECT:/Campanas.html");                          // Indica a los clientes que deben redirigir a la pantalla de presentacion de las campanas
            DBG_SRV("Procesando mensaje: TocaFiesta");
        } else if (mensaje == "PARAR") {                                    // Si el mensaje es "PARAR"  
            nToque = 0;                                                     // Parada la secuencia de toques
            Campanario.ParaSecuencia();                                     // Detiene la secuencia de campanadas
            ws.textAll("REDIRECT:/index.html");                             // Indica a los clientes que deben redirigir
            DBG_SRV("Procesando mensaje: Parar");
        } else if (mensaje.startsWith("CALEFACCION_ON:")) {                 // Si el mensaje comienza con "CALEFACCION_ON:"
            String minutosStr = mensaje.substring(15);                      // Extrae los minutos despu√©s de "CALEFACCION_ON:"
            int minutos = minutosStr.toInt();                               // Convierte la cadena de minutos a entero
            if (minutos < 0 || minutos >  Config::Heating::MAX_MINUTES) {   // Validaci√≥n del rango de minutos
                minutos = 0;                                                // Si est√° fuera del rango, establece a 0
                DBG_SRV_PRINTF("Minutos fuera de rango, establecido a 0. Valor recibido: %s\n", minutosStr.c_str());
            }
            Campanario.EnciendeCalefaccion(minutos);                        // Enciende la calefacci√≥n
            ws.textAll("CALEFACCION:ON:" + String(minutos));                // Env√≠a el estado con los minutos programados
            DBG_SRV_PRINTF("Procesando mensaje: Calefacci√≥n ON por %d minutos\n", minutos);
        } else if (mensaje == "CALEFACCION_OFF") {                          // Si el mensaje es "CALEFACCION_OFF"
            Campanario.ApagaCalefaccion();                                  // Apaga la calefacci√≥n
            ws.textAll("CALEFACCION:OFF");                                  // Env√≠a el estado de la calefacci√≥n a todos los clientes conectados
            DBG_SRV("Procesando mensaje: Calefacci√≥n OFF");
        } else if (mensaje == "GET_CALEFACCION") {                          // Si el mensaje es "GET_CALEFACCION"
            String estadoCalefaccion = Campanario.GetEstadoCalefaccion() ? "ON" : "OFF"; // Enviar el estado de la calefacci√≥n a todos los clientes conectados
            ws.textAll("ESTADO_CALEFACCION:" + estadoCalefaccion);          // Env√≠a el estado de la calefacci√≥n a todos los clientes conectados
            DBG_SRV_PRINTF("Estado de la calefacci√≥n enviado: %s\n", estadoCalefaccion.c_str());
        } else if (mensaje == "GET_TIEMPOCALEFACCION") {                    // Si el mensaje es "GET_TIEMPOCALEFACCION"
            String tiempoCalefaccion = String(Campanario.TestTemporizacionCalefaccion());
            ws.textAll("TIEMPO_CALEFACCION:" + tiempoCalefaccion);          // Env√≠a el tiempo de calefacci√≥n al cliente que lo pidi√≥
        } else if (mensaje == "GET_CAMPANARIO") {                           // Si el mensaje es "GET_CAMPANARIO"  
            String EstadoCampanario = String(Campanario.GetEstadoCampanario()); // Obtiene el estado del campanario 
            ws.textAll("ESTADO_CAMPANARIO:" + EstadoCampanario);            // Env√≠a el estado al cliente que lo pidi√≥
        }else if (mensaje== "GET_SECUENCIA_ACTIVA") {                       // Si el mensaje es "GET_SECUENCIA"  
            String secuenciaActiva = String(Campanario.GetSecuenciaActiva());  // Obtiene la secuencia actual
            ws.textAll("SECUENCIAACTIVA:" + secuenciaActiva);               // Env√≠a la secuencia al cliente que lo pidi√≥    ---- NO UTILIZADO EN ESTA VERSION ----
        }else if (mensaje.startsWith("ADD_ALARMA_WEB:") || 
         mensaje.startsWith("EDIT_ALARMA_WEB:") || 
         mensaje.startsWith("DELETE_ALARMA_WEB:") || 
         mensaje.startsWith("TOGGLE_ALARMA_WEB:") || 
         mensaje == "GET_ALARMAS_WEB" || 
         mensaje == "GET_STATS_ALARMAS_WEB") {
        // Separar comando y datos
            int separador = mensaje.indexOf(':');
            String comando = (separador > 0) ? mensaje.substring(0, separador) : mensaje;
            String datos = (separador > 0) ? mensaje.substring(separador + 1) : "{}";
            procesarComandoAlarma(nullptr, comando, datos);
        } else if (mensaje.startsWith("SET_IDIOMA:")) {
            String nuevoIdioma = mensaje.substring(11);
            DBG_SRV_PRINTF("üåç Cambiando idioma a: %s", nuevoIdioma.c_str());

            if (nuevoIdioma == "ca" || nuevoIdioma == "es") {
                if (guardarIdiomaEnConfig(nuevoIdioma)) {
                    // Notificar a todos los clientes conectados
                    ws.textAll("IDIOMA_CAMBIADO:" + nuevoIdioma);
                    DBG_SRV("‚úÖ Idioma guardado y notificado a todos los clientes");
                } else {
                    ws.textAll("ERROR_IDIOMA:No se pudo guardar");
                }
            } else {
                ws.textAll("ERROR_IDIOMA:Idioma no soportado");
            }

        } else if (mensaje == "GET_CONFIG") {
            DBG_SRV("üìã Enviando configuraci√≥n actual");
            String config = obtenerConfiguracionJSON();
            ws.textAll("CONFIG_ACTUAL:" + config);

        } else if (mensaje == "GET_IDIOMA") {
            String idioma = cargarIdiomaDesdeConfig();
            ws.textAll("IDIOMA_ACTUAL:" + idioma);
            DBG_SRV_PRINTF("üì§ Enviando idioma actual: %s", idioma.c_str());
        } else {
            nToque = 0; // Resetea la secuencia si el mensaje no es reconocido
            DBG_SRV("Mensaje no reconocido, reseteando secuencia.");
        }
    }    
    /**
    * @brief Procesa comandos espec√≠ficos de gesti√≥n de alarmas personalizables
    * 
    * @details Funci√≥n especializada que maneja todos los comandos relacionados
    *          con alarmas personalizables recibidos a trav√©s del WebSocket.
    *          
    *          **COMANDOS PROCESADOS:**
    *          - ADD_ALARMA_WEB: Crea nueva alarma personalizable con callback autom√°tico
    *          - EDIT_ALARMA_WEB: Modifica alarma existente manteniendo callback original
    *          - DELETE_ALARMA_WEB: Elimina alarma personalizable del sistema
    *          - TOGGLE_ALARMA_WEB: Habilita/deshabilita alarma espec√≠fica
    *          - GET_ALARMAS_WEB: Obtiene listado completo de alarmas personalizables
    *          - GET_STATS_ALARMAS_WEB: Obtiene estad√≠sticas del sistema de alarmas
    *          
    *          **TIPOS DE ACCI√ìN SOPORTADOS:**
    *          - MISA: Configura callback accionSecuencia con par√°metro MISA
    *          - DIFUNTOS: Configura callback accionSecuencia con par√°metro DIFUNTOS  
    *          - FIESTA: Configura callback accionSecuencia con par√°metro personalizado
    *          
    *          **PROCESO DE CREACI√ìN:**
    *          1. Deserializa datos JSON del comando
    *          2. Determina callback y par√°metro seg√∫n tipo de acci√≥n
    *          3. Convierte d√≠a web (0-7) a m√°scara de d√≠as del sistema
    *          4. Llama a Alarmas.addPersonalizable() con par√°metros procesados
    *          5. Env√≠a confirmaci√≥n o error a todos los clientes WebSocket
    * 
    * @param client Puntero al cliente WebSocket que envi√≥ el comando (puede ser nullptr)
    * @param comando String con el comando a procesar (ADD_ALARMA_WEB, EDIT_ALARMA_WEB, etc.)
    * @param datos String con datos JSON del comando a procesar
    * 
    * @note Llamada autom√°ticamente por procesaMensajeWebSocket() para comandos de alarmas
    * @note Utiliza deserializeJson() para procesar datos de entrada
    * @note Configura callbacks autom√°ticamente seg√∫n el tipo de acci√≥n
    * @note Env√≠a respuestas a TODOS los clientes conectados v√≠a ws.textAll()
    * 
    * @warning Valida todos los datos JSON antes de procesar comandos
    * @warning Los callbacks son configurados autom√°ticamente, no personalizables por comando
    * @warning Comando EDIT no modifica callbacks existentes por seguridad
    * 
    * @see procesaMensajeWebSocket() - Funci√≥n que delega comandos de alarmas
    * @see AlarmScheduler::addPersonalizable() - M√©todo para crear alarmas
    * @see AlarmScheduler::modificarPersonalizable() - M√©todo para modificar alarmas
    * @see AlarmScheduler::eliminarPersonalizable() - M√©todo para eliminar alarmas
    * @see convertirDiaAMascara() - Funci√≥n auxiliar para conversi√≥n de d√≠as
    * @see accionSecuencia() - Callback configurado autom√°ticamente
    * 
    * @since v2.1 - Sistema de alarmas personalizables v√≠a web
    * @author Julian Salas Bartolom√©
    */
    void procesarComandoAlarma(AsyncWebSocketClient *client, const String& comando, const String& datos) {
        JsonDocument doc;
        deserializeJson(doc, datos);
           
            if (comando == "ADD_ALARMA_WEB") {
               // Determinar callback y par√°metro seg√∫n el tipo
               String tipoAccion = doc["accion"] | "MISA";
               void (*callback)(uint16_t) = nullptr;
               uint16_t parametro = 0;

               if (tipoAccion == "MISA") {
                   callback = accionSecuencia;
                   parametro = Config::States::I2CState::MISA;
               } else if (tipoAccion == "DIFUNTOS") {
                   callback = accionSecuencia;
                   parametro = Config::States::I2CState::DIFUNTOS;
               } else if (tipoAccion == "FIESTA") {
                   callback = accionSecuencia;
                   parametro = Config::States::I2CState::FIESTA;
               }

               if (callback) {
                   uint8_t idx = Alarmas.addPersonalizable(
                       doc["nombre"] | "",
                       doc["descripcion"] | "",
                       convertirDiaAMascara(doc["dia"] | 0),
                       doc["hora"] | 0,
                       doc["minuto"] | 0,
                       tipoAccion.c_str(),
                       parametro,
                       callback,
                       doc["habilitada"] | true
                   );

                   if (idx < AlarmScheduler::MAX_ALARMAS) {
                       ws.textAll("ALARMA_CREADA_WEB:" + String(Alarmas.get(idx)->idWeb));
                   } else {
                       ws.textAll("ERROR_ALARMA_WEB:M√°ximo de alarmas alcanzado");
                   }
               }   
            } else if (comando == "EDIT_ALARMA_WEB") {
                
                String tipoAccion = doc["accion"] | "MISA";
                void (*callback)(uint16_t) = nullptr;
                uint16_t parametro = 0;
            
                if (tipoAccion == "MISA") {
                    callback = accionSecuencia;
                    parametro = Config::States::I2CState::MISA;
                    DBG_SRV("üîß Configurando callback MISA para edici√≥n");
                } else if (tipoAccion == "DIFUNTOS") {
                    callback = accionSecuencia;
                    parametro = Config::States::I2CState::DIFUNTOS;
                    DBG_SRV("üîß Configurando callback DIFUNTOS para edici√≥n");
                } else if (tipoAccion == "FIESTA") {
                    callback = accionSecuencia;
                    parametro = Config::States::I2CState::FIESTA;
                    DBG_SRV("üîß Configurando callback FIESTA para edici√≥n");
                }
            
                // ‚úÖ VERIFICAR callback v√°lido
                if (callback == nullptr) {
                    DBG_SRV_PRINTF("‚ùå ERROR: Callback es NULL para tipo '%s'", tipoAccion.c_str());
                    ws.textAll("ERROR_ALARMA_WEB:Tipo de acci√≥n no v√°lido");
                    return;
                }
            
                // ‚úÖ LLAMAR con callback y par√°metro (igual que ADD_ALARMA_WEB)
                bool resultado = Alarmas.modificarPersonalizable(
                    doc["id"] | -1,
                    doc["nombre"] | "",
                    doc["descripcion"] | "",
                    convertirDiaAMascara(doc["dia"] | 0),
                    doc["hora"] | 0,
                    doc["minuto"] | 0,
                    tipoAccion.c_str(),
                    doc["habilitada"] | true,
                    callback,      // ‚úÖ PASAR CALLBACK
                    parametro      // ‚úÖ PASAR PAR√ÅMETRO
                );
            
                if (resultado) {
                    ws.textAll("ALARMA_MODIFICADA_WEB:" + String(doc["id"] | -1));
                    DBG_SRV("‚úÖ Alarma modificada con callback reasignado");
                } else {
                    ws.textAll("ERROR_ALARMA_WEB:No se pudo modificar");
                }
            } else if (comando == "DELETE_ALARMA_WEB") {
               int id = doc["id"] | -1;
               if (Alarmas.eliminarPersonalizable(id)) {
                   ws.textAll("ALARMA_ELIMINADA_WEB:" + String(id));
               } else {
                   ws.textAll("ERROR_ALARMA_WEB:No se pudo eliminar");
               }
           } else if (comando == "TOGGLE_ALARMA_WEB") {
               int id = doc["id"] | -1;
               bool estado = doc["habilitada"] | false;
               if (Alarmas.habilitarPersonalizable(id, estado)) {
                   ws.textAll("ALARMA_TOGGLED_WEB:" + String(id) + ":" + (estado ? "true" : "false"));
               }
           } else if (comando == "GET_ALARMAS_WEB") {
               String jsonAlarmas = Alarmas.obtenerPersonalizablesJSON();
               ws.textAll("ALARMAS_WEB:" + jsonAlarmas);
           } else if (comando == "GET_STATS_ALARMAS_WEB") {
               String jsonStats = Alarmas.obtenerEstadisticasJSON();
               ws.textAll("STATS_ALARMAS_WEB:" + jsonStats);
           }
    }
    /**
     * @brief Convierte d√≠a web (0-7) a m√°scara de d√≠as del sistema de alarmas
     * 
     * @details Funci√≥n auxiliar que traduce la numeraci√≥n de d√≠as utilizada
     *          en la interfaz web a las m√°scaras de bits utilizadas internamente
     *          por el sistema de alarmas del campanario.
     *          
     *          **CONVERSI√ìN DE D√çAS:**
     *          - 0: Todos los d√≠as (DOW_TODOS = 0x7F)
     *          - 1: Domingo (bit 0 = 0x01)
     *          - 2: Lunes (bit 1 = 0x02)
     *          - 3: Martes (bit 2 = 0x04)
     *          - 4: Mi√©rcoles (bit 3 = 0x08)
     *          - 5: Jueves (bit 4 = 0x10)
     *          - 6: Viernes (bit 5 = 0x20)
     *          - 7: S√°bado (bit 6 = 0x40)
     *          
     *          **VALIDACI√ìN:**
     *          - Valores fuera del rango 0-7 se convierten a DOW_TODOS
     *          - Garantiza compatibilidad con sistema interno de m√°scaras
     * 
     * @param dia D√≠a en formato web (0=todos, 1=domingo, 2=lunes, ..., 7=s√°bado)
     * 
     * @retval uint8_t M√°scara de bits compatible con sistema de alarmas
     * @retval DOW_TODOS Si d√≠a est√° fuera del rango v√°lido (0-7)
     * 
     * @note Utilizada internamente por procesarComandoAlarma()
     * @note Compatible con constantes DOW_* definidas en el sistema
     * @note Domingo se considera d√≠a 1 (no 0) en la numeraci√≥n web
     * 
     * @warning Valores inv√°lidos se convierten autom√°ticamente a DOW_TODOS
     * @warning La numeraci√≥n web difiere del est√°ndar ISO (lunes = d√≠a 1)
     * 
     * @see procesarComandoAlarma() - Funci√≥n principal que utiliza esta conversi√≥n
     * @see DOW_TODOS, DOW_DOMINGO, DOW_LUNES, etc. - Constantes del sistema
     * @see AlarmScheduler::addPersonalizable() - Recibe m√°scara convertida
     * 
     * @since v2.1 - Sistema de alarmas personalizables v√≠a web
     * @author Julian Salas Bartolom√©
     */
    uint8_t convertirDiaAMascara(int dia) {
        if (dia == 0) {
            DBG_SRV("üîÑ Convertiendo d√≠a 0 (todos los d√≠as) a DOW_TODOS");
            return DOW_TODOS;
        }

        if (dia >= 1 && dia <= 7) {
            uint8_t mascara = 1 << (dia - 1);
            DBG_SRV_PRINTF("üîÑ Convertiendo d√≠a %d a m√°scara 0x%02X", dia, mascara);
            return mascara;
        }

        DBG_SRV_PRINTF("‚ö†Ô∏è D√≠a inv√°lido %d, usando DOW_TODOS", dia);
        return DOW_TODOS;
    }

    // ============================================================================
    // GESTI√ìN DE IDIOMA PERSISTENTE
    // ============================================================================

/**
 * @brief Carga la configuraci√≥n de idioma persistente desde SPIFFS
 * 
 * @details Funci√≥n que recupera el idioma configurado por el usuario desde
 *          el archivo de configuraci√≥n almacenado en SPIFFS, garantizando
 *          persistencia entre reinicios del dispositivo.
 *          
 *          **PROCESO DE CARGA:**
 *          1. Verifica existencia del archivo /config.json en SPIFFS
 *          2. Si no existe, crea configuraci√≥n por defecto (catal√°n)
 *          3. Lee y parsea contenido JSON del archivo de configuraci√≥n
 *          4. Extrae campo "idioma" con fallback a catal√°n si hay errores
 *          5. Valida y retorna c√≥digo de idioma configurado
 *          
 *          **IDIOMAS SOPORTADOS:**
 *          - "ca": Catal√°n (idioma por defecto)
 *          - "es": Espa√±ol (castellano)
 *          
 *          **MANEJO DE ERRORES:**
 *          - Archivo inexistente: Crea configuraci√≥n por defecto
 *          - Error de lectura: Retorna catal√°n por defecto
 *          - JSON malformado: Retorna catal√°n por defecto
 *          - Campo faltante: Utiliza catal√°n como fallback
 * 
 * @retval String C√≥digo de idioma configurado ("ca" o "es")
 * @retval "ca" Si hay errores o no existe configuraci√≥n previa
 * 
 * @note Llamada durante inicializaci√≥n del servidor web
 * @note Crea archivo de configuraci√≥n autom√°ticamente si no existe
 * @note Utiliza logging de depuraci√≥n si DEBUGSERVIDOR est√° definido
 * @note Garantiza que siempre retorna un idioma v√°lido
 * 
 * @warning Requiere SPIFFS montado correctamente antes de la llamada
 * @warning Funci√≥n s√≠ncrona, puede bloquear brevemente durante lectura de archivo
 * 
 * @see guardarIdiomaEnConfig() - Funci√≥n complementaria para guardar idioma
 * @see ServidorOn() - Funci√≥n que utiliza idioma cargado durante inicializaci√≥n
 * @see obtenerConfiguracionJSON() - Funci√≥n relacionada para configuraci√≥n completa
 * 
 * @since v3.0 - Sistema de configuraci√≥n persistente de idioma
 * @author Julian Salas Bartolom√©
 */
String cargarIdiomaDesdeConfig() {
    DBG_SRV("üìÇ Cargando idioma desde configuraci√≥n...");
    
    if (!SPIFFS.exists("/config.json")) {
        DBG_SRV("‚ö†Ô∏è Archivo config.json no existe, creando con idioma por defecto");
        guardarIdiomaEnConfig("ca"); // Catal√°n por defecto
        return "ca";
    }
    
    File file = SPIFFS.open("/config.json", "r");
    if (!file) {
        DBG_SRV("‚ùå Error al abrir config.json");
        return "ca";
    }
    
    String contenido = file.readString();
    file.close();
    
    JsonDocument doc;
    DeserializationError error = deserializeJson(doc, contenido);
    
    if (error) {
        DBG_SRV_PRINTF("‚ùå Error al parsear config.json: %s", error.c_str());
        return "ca";
    }
    
    String idioma = doc["idioma"] | "ca";
    DBG_SRV_PRINTF("‚úÖ Idioma cargado: %s", idioma.c_str());
    
    return idioma;
}

/**
 * @brief Guarda la configuraci√≥n de idioma de forma persistente en SPIFFS
 * 
 * @details Funci√≥n que almacena el idioma seleccionado por el usuario en
 *          el archivo de configuraci√≥n SPIFFS, preservando configuraci√≥n
 *          existente y garantizando persistencia entre reinicios.
 *          
 *          **PROCESO DE GUARDADO:**
 *          1. Carga configuraci√≥n existente de /config.json si existe
 *          2. Preserva campos de configuraci√≥n no relacionados con idioma
 *          3. Actualiza campo "idioma" con nuevo valor especificado
 *          4. A√±ade metadatos de configuraci√≥n completa (zona horaria, etc.)
 *          5. Serializa y guarda JSON actualizado en SPIFFS
 *          6. Valida operaci√≥n de escritura antes de confirmar √©xito
 *          
 *          **ESTRUCTURA DEL ARCHIVO CONFIG.JSON:**
 *          ```json
 *          {
 *            "version": "1.0",
 *            "idioma": "ca|es",
 *            "configuracion": {
 *              "idioma_defecto": "ca|es",
 *              "zona_horaria": "Europe/Madrid",
 *              "formato_hora": "24h"
 *            }
 *          }
 *          ```
 *          
 *          **VALIDACIONES:**
 *          - Preserva configuraci√≥n existente no relacionada con idioma
 *          - Crea estructura completa si archivo no exist√≠a previamente
 *          - Verifica escritura exitosa antes de confirmar operaci√≥n
 * 
 * @param idioma C√≥digo de idioma a guardar ("ca" para catal√°n, "es" para espa√±ol)
 * 
 * @retval true Idioma guardado correctamente en SPIFFS
 * @retval false Error durante escritura o creaci√≥n del archivo
 * 
 * @note Llamada autom√°ticamente cuando usuario cambia idioma v√≠a web
 * @note Preserva configuraci√≥n existente no relacionada con idioma
 * @note Utiliza logging de depuraci√≥n si DEBUGSERVIDOR est√° definido
 * @note Crea archivo completo con metadatos si no exist√≠a previamente
 * 
 * @warning Requiere SPIFFS montado y con espacio suficiente disponible
 * @warning Funci√≥n s√≠ncrona, puede bloquear brevemente durante escritura
 * @warning No valida c√≥digos de idioma, acepta cualquier string
 * 
 * @see cargarIdiomaDesdeConfig() - Funci√≥n complementaria para cargar idioma
 * @see procesaMensajeWebSocket() - Procesa comandos SET_IDIOMA que llaman esta funci√≥n
 * @see obtenerConfiguracionJSON() - Funci√≥n relacionada para configuraci√≥n completa
 * 
 * @since v3.0 - Sistema de configuraci√≥n persistente de idioma
 * @author Julian Salas Bartolom√©
 */
bool guardarIdiomaEnConfig(const String& idioma) {
    DBG_SRV_PRINTF("üíæ Guardando idioma en configuraci√≥n: %s", idioma.c_str());
    
    JsonDocument doc;
    
    // Cargar configuraci√≥n existente si existe
    if (SPIFFS.exists("/config.json")) {
        File file = SPIFFS.open("/config.json", "r");
        if (file) {
            String contenido = file.readString();
            file.close();
            deserializeJson(doc, contenido); // Ignorar errores, usar estructura vac√≠a si falla
        }
    }
    
    // Actualizar idioma
    doc["version"] = "1.0";
    doc["idioma"] = idioma;
    doc["configuracion"]["idioma_defecto"] = idioma;
    doc["configuracion"]["zona_horaria"] = "Europe/Madrid";
    doc["configuracion"]["formato_hora"] = "24h";
    
    // Guardar archivo
    File file = SPIFFS.open("/config.json", "w");
    if (!file) {
        DBG_SRV("‚ùå Error al crear config.json");
        return false;
    }
    
    serializeJson(doc, file);
    file.close();
    
    DBG_SRV("‚úÖ Configuraci√≥n guardada correctamente");
    return true;
}

/**
 * @brief Obtiene la configuraci√≥n completa del sistema en formato JSON
 * 
 * @details Funci√≥n que retorna toda la configuraci√≥n del sistema como
 *          string JSON, incluyendo idioma, zona horaria y preferencias
 *          de formato, para ser enviada a clientes web.
 *          
 *          **CONFIGURACI√ìN INCLUIDA:**
 *          - Versi√≥n del archivo de configuraci√≥n
 *          - Idioma actualmente configurado
 *          - Idioma por defecto del sistema
 *          - Zona horaria configurada
 *          - Formato de hora preferido
 *          
 *          **PROCESO DE OBTENCI√ìN:**
 *          1. Verifica existencia de archivo /config.json
 *          2. Si no existe, genera configuraci√≥n por defecto
 *          3. Lee contenido completo del archivo
 *          4. Retorna JSON como string para env√≠o a cliente
 *          
 *          **CONFIGURACI√ìN POR DEFECTO:**
 *          ```json
 *          {
 *            "version": "1.0",
 *            "idioma": "ca",
 *            "configuracion": {
 *              "idioma_defecto": "ca",
 *              "zona_horaria": "Europe/Madrid", 
 *              "formato_hora": "24h"
 *            }
 *          }
 *          ```
 * 
 * @retval String JSON completo con toda la configuraci√≥n del sistema
 * @retval "{}" Si hay error cr√≠tico leyendo el archivo
 * 
 * @note Llamada cuando cliente web solicita configuraci√≥n v√≠a GET_CONFIG
 * @note Genera configuraci√≥n por defecto si archivo no existe
 * @note Retorna JSON como string listo para env√≠o WebSocket
 * @note No modifica archivos, solo lectura de configuraci√≥n
 * 
 * @warning Requiere SPIFFS montado correctamente
 * @warning Funci√≥n s√≠ncrona, puede bloquear brevemente durante lectura
 * @warning Retorna "{}" en caso de error cr√≠tico de lectura
 * 
 * @see cargarIdiomaDesdeConfig() - Funci√≥n relacionada para solo idioma
 * @see guardarIdiomaEnConfig() - Funci√≥n relacionada para guardar configuraci√≥n
 * @see procesaMensajeWebSocket() - Procesa comandos GET_CONFIG que llaman esta funci√≥n
 * 
 * @since v3.0 - Sistema de gesti√≥n de configuraci√≥n completa
 * @author Julian Salas Bartolom√©
 */

String obtenerConfiguracionJSON() {
    if (!SPIFFS.exists("/config.json")) {
        // Crear configuraci√≥n por defecto
        JsonDocument doc;
        doc["version"] = "1.0";
        doc["idioma"] = "ca";
        doc["configuracion"]["idioma_defecto"] = "ca";
        doc["configuracion"]["zona_horaria"] = "Europe/Madrid";
        doc["configuracion"]["formato_hora"] = "24h";
        
        String resultado;
        serializeJson(doc, resultado);
        return resultado;
    }
    
    File file = SPIFFS.open("/config.json", "r");
    if (!file) return "{}";
    
    String contenido = file.readString();
    file.close();
    
    return contenido;
}

  /**
   * @brief Verifica si hay conexi√≥n activa a Internet
   * 
   * @details Funci√≥n que realiza una verificaci√≥n real de conectividad
   *          a Internet mediante petici√≥n HTTP a un servidor externo confiable.
   *          
   *          **PROCESO DE VERIFICACI√ìN:**
   *          1. Utiliza HTTPClient para realizar petici√≥n HTTP GET
   *          2. Conecta a servidor externo confiable (ej: google.com, 8.8.8.8)
   *          3. Analiza c√≥digo de respuesta HTTP
   *          4. Determina si hay conectividad real a Internet
   * 
   * @retval true Conexi√≥n a Internet verificada y funcionando
   * @retval false Sin conexi√≥n a Internet o error en verificaci√≥n
   * 
   * @note Realiza verificaci√≥n REAL, no solo estado WiFi local
   * @note Utiliza timeout para evitar bloqueos prolongados
   * @note Logging autom√°tico del resultado si DEBUGSERVIDOR definido
   * @note √ötil para detectar redes WiFi sin salida a Internet
   * 
   * @warning Funci√≥n bloqueante durante la verificaci√≥n (pocos segundos)
   * @warning Requiere WiFi conectado para funcionar correctamente
   * 
   * @see client - Cliente WiFi utilizado para la verificaci√≥n
   * @see HTTPClient - Clase utilizada para petici√≥n HTTP
   * 
   * @since v3.0
   * @author Julian Salas Bartolom√©
   */
    bool hayInternet() {
      HTTPClient http;
      http.begin("http://clients3.google.com/generate_204");                        // URL ligera y r√°pida de Google
      int httpCode = http.GET();                                                    // Realiza la petici√≥n GET
      http.end();                                                                   // Finaliza la conexi√≥n
      DBG_SRV_PRINTF("hayInternet -> C√≥digo HTTP recibido: %d\n", httpCode);  
      if (httpCode == 204) {
          DBG_SRV("hayInternet -> Conexi√≥n a Internet disponible.");
      } else {
          DBG_SRV("hayInternet -> No hay conexi√≥n a Internet.");
      }
      return (httpCode == 204);                                                     // Devolvemos true si hay internet, (Google responde 204 si hay Internet)
  }

  /**
   * @brief Lista los archivos almacenados en el sistema de archivos SPIFFS y muestra su nombre y tama√±o por el puerto serie.
   *
   * Esta funci√≥n recorre todos los archivos presentes en la ra√≠z del sistema de archivos SPIFFS,
   * imprimiendo el nombre y el tama√±o de cada archivo utilizando la interfaz Serial.
   * Es √∫til para depuraci√≥n y verificaci√≥n del contenido almacenado en la memoria SPIFFS del dispositivo.
   */
    void listSPIFFS() {

      Serial.println("Archivos en SPIFFS:");
      File root = SPIFFS.open("/");
      File file = root.openNextFile();

      while (file) {
          Serial.print("Nombre: ");
          Serial.println(file.name());
          Serial.print("Tama√±o: ");
          Serial.println(file.size());
          file = root.openNextFile(); // Abrir el siguiente archivo
      }
}  

  /**
   * @brief Imprime el contenido de un archivo en el monitor serie l√≠nea por l√≠nea.
   * 
   * Esta funci√≥n abre el archivo especificado por el nombre de archivo en modo lectura,
   * imprime su contenido l√≠nea por l√≠nea en el monitor serie y luego cierra el archivo.
   * Si ocurre un error al abrir el archivo, se muestra un mensaje de error.
   * 
   * @param filename Nombre del archivo a leer e imprimir.
   */
   void printFileContent(const char* filename) {
     File file = SPIFFS.open(filename, "r"); // Abrir el archivo en modo lectura
     if (!file) {
         Serial.printf("Error al abrir el archivo: %s\n", filename);
         return;
     }
     Serial.printf("Contenido del archivo %s:\n", filename);
     while (file.available()) {
         String line = file.readStringUntil('\n'); // Leer l√≠nea por l√≠nea
         Serial.println(line); // Imprimir la l√≠nea en el monitor serie
     }
     file.close(); // Cerrar el archivo
   }
